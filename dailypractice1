# def modifycustomersdata(ruleid,ruleinfo,ruletypeid,subtypeid,ruledescription,startdate,enddate,runfrequency,lastrundate,nextrundate,approvalrequired,pushnotificationmessage,notificationtime,updategroupstats,notifyadminpostrun,rulenotification,creategroupnooffer,createdby,createdatetime,updatedby,updatedatetime,rulestatus,rsaclientid,rsaclientguid,apruleid,inlastdays,ntimespurchased,topncustomers,amountpurchased,purchasedupcs,purchasedepts,storelist,zipcodelist,customersince,createdatime,updatedtime,istierbased,tiertypeid,criteriastatus,tiername):
#     try:
#         table.execute(f"select * from AP_Rules where RuleId = {ruleid}")

#         headers = [x[0] for x in table.description]
#         result = table.fetchall()
#         for res in result:
#             var1 = dict(zip(headers,res))
#             var3 = var1['RuleGuid']
#         conn.commit()
        
#         table.execute(f"exec ap_update_rule UPDATE AP_Rules set RuleTypeId = '{ruletypeid}',SubTypeID = '{subtypeid}',RuleDescription = '{ruledescription}', StartDate = '{startdate}', EndDate = '{enddate}', NextRunDate = '{nextrundate}',RunFrequency = '{runfrequency}',ApprovalRequired = '{approvalrequired}',PushNotificationMessage = '{pushnotificationmessage}',NotificationTime = '{notificationtime}', UpdateGroupStats = '{updategroupstats}', NotifyAdminPostRun = '{notifyadminpostrun}',RuleNotificationEmail = '{rulenotification}',CreateGroupOnlyNoOfferRequired = '{creategroupnooffer}',RuleStatus = '{rulestatus}',UpdatedBy = '{updatedby}', UpdateDateTime = '{updatedatetime}' where RuleId = '{var3}'")
#         table.execute(f"exec ap_update_rule_criteria UPDATE AP_Rules_Criteria set InLastDays = {inlastdays},NTimesPurchased = {ntimespurchased}, AmountPurchased = '{amountpurchased}', IsTierBased = '{istierbased}',TierTypeID = '{tiertypeid}', CriteriaStatus = '{criteriastatus}', TopNCustomers = '{topncustomers}', ZipCodeList = '{zipcodelist}', UpdateDateTime = '{updatedtime}' where APRuleCrtiteriaId = {apruleid}")
#         conn.commit()

#         body = {
#             'operation':'PATCH',
#             'Message':'SUCCESS'
#         }
#         return buildResponse(200,body)

#     except:
#         logger.exception("Do your Custom error handling here.")
        
#         table.execute(f"select * from AP_Rules where RuleId = {ruleid}")
        
#         headers = [x[0] for x in table.description]
#         result = table.fetchall()
#         for res in result:
#             var1 = dict(zip(headers,res))
#             gd = var1['RuleGuid']
#             create = var1['CreatedBy']
#         conn.commit()
#         table.execute(f"exec ap_delete_rule @Rule_guid = '{gd}',@Created_by = '{create}'") 
#         conn.commit()
#         return buildResponse(404,'Insert has been Failed!')
    

